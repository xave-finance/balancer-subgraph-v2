# Vault
type Balancer @entity {
  id: ID!
  poolCount: Int!
  pools: [Pool!] @derivedFrom(field: "vaultID")
  snapshots: [BalancerSnapshot!] @derivedFrom(field: "vault")

  totalLiquidity: BigDecimal!
  totalSwapCount: BigInt!
  totalSwapVolume: BigDecimal!
  totalSwapFee: BigDecimal!
  totalProtocolFee: BigDecimal # TODO: make mandatory at next full sync
  protocolFeesCollector: Bytes # TODO: make mandatory at next full sync
}

type Pool @entity {
  id: ID!
  address: Bytes!
  poolType: String
  poolTypeVersion: Int
  factory: Bytes
  strategyType: Int!
  oracleEnabled: Boolean!
  symbol: String
  name: String

  "Indicates if a pool can be swapped against. Combines multiple sources, including offchain curation"
  swapEnabled: Boolean!

  "The native swapEnabled boolean. internal to the pool. Only applies to Gyro, LBPs and InvestmentPools"
  swapEnabledInternal: Boolean

  "External indication from an offchain permissioned actor"
  swapEnabledCurationSignal: Boolean

  swapFee: BigDecimal!
  owner: Bytes
  isPaused: Boolean

  totalWeight: BigDecimal
  totalSwapVolume: BigDecimal!
  totalSwapFee: BigDecimal!
  totalLiquidity: BigDecimal!
  totalLiquiditySansBPT: BigDecimal # TODO: make mandatory at next full sync
  totalShares: BigDecimal!
  totalProtocolFee: BigDecimal # TODO: make mandatory at next full sync
  createTime: Int!
  swapsCount: BigInt!
  holdersCount: BigInt!

  vaultID: Balancer!
  tx: Bytes

  tokensList: [Bytes!]!

  tokens: [PoolToken!] @derivedFrom(field: "poolId")
  joinsExits: [JoinExit!] @derivedFrom(field: "pool")
  swaps: [Swap!] @derivedFrom(field: "poolId")
  shares: [PoolShare!] @derivedFrom(field: "poolId")
  snapshots: [PoolSnapshot!] @derivedFrom(field: "pool")
  historicalValues: [PoolHistoricalLiquidity!] @derivedFrom(field: "poolId")

  # LiquidityBootstrappingPool Only
  weightUpdates: [GradualWeightUpdate!] @derivedFrom(field: "poolId")

  # StablePool Only
  amp: BigInt
  latestAmpUpdate: AmpUpdate
  ampUpdates: [AmpUpdate!] @derivedFrom(field: "poolId")

  # MetaStablePool and LinearPool Only
  priceRateProviders: [PriceRateProvider!] @derivedFrom(field: "poolId")

  # ConvergentCurvePool (Element) Only
  principalToken: Bytes
  baseToken: Bytes
  expiryTime: BigInt
  unitSeconds: BigInt

  # InvestmentPool Only
  managementFee: BigDecimal

  # ManagedPool Only
  joinExitEnabled: Boolean
  mustAllowlistLPs: Boolean
  managementAumFee: BigDecimal
  totalAumFeeCollectedInBPT: BigDecimal
  circuitBreakers: [CircuitBreaker!] @derivedFrom(field: "pool")

  # LinearPool Only
  mainIndex: Int
  wrappedIndex: Int
  lowerTarget: BigDecimal
  upperTarget: BigDecimal

  # Gyro2Pool Only
  sqrtAlpha: BigDecimal
  sqrtBeta: BigDecimal

  # Gyro3Pool Only
  root3Alpha: BigDecimal

  # GyroEPool Only
  c: BigDecimal
  s: BigDecimal
  tauAlphaX: BigDecimal
  tauAlphaY: BigDecimal
  tauBetaX: BigDecimal
  tauBetaY: BigDecimal
  u: BigDecimal
  v: BigDecimal
  w: BigDecimal
  z: BigDecimal
  dSq: BigDecimal

  # GyroEPool+FXPool Only
  alpha: BigDecimal
  beta: BigDecimal
  lambda: BigDecimal

  # FXPool Only
  delta: BigDecimal
  epsilon: BigDecimal

  # Composable and WeightedV2+ Only
  isInRecoveryMode: Boolean
  protocolSwapFeeCache: BigDecimal
  protocolYieldFeeCache: BigDecimal
  protocolAumFeeCache: BigDecimal
  totalProtocolFeePaidInBPT: BigDecimal

  # Composable Stable Only
  lastJoinExitAmp: BigInt
  lastPostJoinExitInvariant: BigDecimal

  # AaveLinearV3 Only
  protocolId: Int
  protocolIdData: ProtocolIdData
}

type PoolContract @entity(immutable: true) {
  id: ID!
  pool: Pool!
}

type PoolToken @entity {
  id: ID!
  poolId: Pool
  token: Token!
  assetManager: Bytes!
  symbol: String!
  name: String!
  decimals: Int!
  index: Int # TODO: make mandatory at next full sync
  address: String!
  oldPriceRate: BigDecimal # TODO: make mandatory at next full sync
  priceRate: BigDecimal!
  balance: BigDecimal!
  paidProtocolFees: BigDecimal # TODO: make mandatory at next full sync
  cashBalance: BigDecimal!
  managedBalance: BigDecimal!
  managements: [ManagementOperation!] @derivedFrom(field: "poolTokenId")

  # WeightedPool Only
  weight: BigDecimal

  # ComposableStablePool Only
  isExemptFromYieldProtocolFee: Boolean

  # ManagedPool Only
  circuitBreaker: CircuitBreaker
}

type PriceRateProvider @entity {
  id: ID!
  poolId: Pool!
  token: PoolToken!
  address: Bytes!
  rate: BigDecimal
  lastCached: Int
  cacheDuration: Int
  cacheExpiry: Int
}

type CircuitBreaker @entity {
  id: ID!
  pool: Pool!
  token: PoolToken!
  bptPrice: BigDecimal!
  lowerBoundPercentage: BigDecimal!
  upperBoundPercentage: BigDecimal!
}

type PoolShare @entity {
  id: ID!
  userAddress: User!
  poolId: Pool!
  balance: BigDecimal!
}

type User @entity {
  id: ID!
  sharesOwned: [PoolShare!] @derivedFrom(field: "userAddress")
  swaps: [Swap!] @derivedFrom(field: "userAddress")
  userInternalBalances: [UserInternalBalance!]
    @derivedFrom(field: "userAddress")
}

type UserInternalBalance @entity {
  id: ID!
  userAddress: User
  token: Bytes!
  tokenInfo: Token
  balance: BigDecimal!
}

type GradualWeightUpdate @entity(immutable: true) {
  id: ID!
  poolId: Pool!
  scheduledTimestamp: Int!
  startTimestamp: BigInt!
  endTimestamp: BigInt!
  startWeights: [BigInt!]!
  endWeights: [BigInt!]!
}

type AmpUpdate @entity(immutable: true) {
  id: ID!
  poolId: Pool!
  scheduledTimestamp: Int!
  startTimestamp: BigInt!
  endTimestamp: BigInt!
  startAmp: BigInt!
  endAmp: BigInt!
}

type SwapFeeUpdate @entity(immutable: true) {
  id: ID!
  pool: Pool!
  scheduledTimestamp: Int!
  startTimestamp: BigInt!
  endTimestamp: BigInt!
  startSwapFeePercentage: BigDecimal!
  endSwapFeePercentage: BigDecimal!
}

type Swap @entity(immutable: true) {
  id: ID!
  caller: Bytes!
  tokenIn: Bytes!
  tokenInSym: String!
  tokenOut: Bytes!
  tokenOutSym: String!
  tokenAmountIn: BigDecimal!
  tokenAmountOut: BigDecimal!
  valueUSD: BigDecimal!
  poolId: Pool!
  userAddress: User!
  timestamp: Int!
  block: BigInt
  tx: Bytes!
}

enum InvestType {
  Join
  Exit
}

type JoinExit @entity(immutable: true) {
  id: ID!
  type: InvestType!
  sender: Bytes!
  amounts: [BigDecimal!]!
  valueUSD: BigDecimal
  pool: Pool!
  user: User!
  timestamp: Int!
  tx: Bytes!
  block: BigInt
}

type LatestPrice @entity {
  id: ID!
  asset: Bytes!
  pricingAsset: Bytes! # address of stable asset
  poolId: Pool! # last pool which set price
  price: BigDecimal! # all the latest prices
  block: BigInt! # last block that prices were updated
}

type PoolHistoricalLiquidity @entity {
  id: ID!
  poolId: Pool!
  poolTotalShares: BigDecimal!
  poolLiquidity: BigDecimal! # total value, priced in the stable asset - ie USD
  poolShareValue: BigDecimal!
  pricingAsset: Bytes! # address of stable asset
  block: BigInt!
}

type TokenPrice @entity {
  id: ID! # address of token + address of stablecoin-poolId
  poolId: Pool!
  asset: Bytes!
  amount: BigDecimal!
  pricingAsset: Bytes! # address of stable asset
  price: BigDecimal!
  block: BigInt!
  timestamp: Int!
}

enum OperationType {
  Deposit
  Withdraw
  Update
}

type ManagementOperation @entity(immutable: true) {
  id: ID!
  type: OperationType!
  cashDelta: BigDecimal!
  managedDelta: BigDecimal!
  poolTokenId: PoolToken!
  timestamp: Int!
}

type PoolSnapshot @entity {
  id: ID!
  pool: Pool!
  amounts: [BigDecimal!]!
  totalShares: BigDecimal!
  swapVolume: BigDecimal!
  protocolFee: BigDecimal # TODO: make mandatory at next full sync
  swapFees: BigDecimal!
  liquidity: BigDecimal!
  swapsCount: BigInt!
  holdersCount: BigInt!
  timestamp: Int!
}

type Token @entity {
  id: ID!
  symbol: String
  name: String
  decimals: Int!
  address: String!
  totalBalanceUSD: BigDecimal! # total balance of tokens across balancer
  totalBalanceNotional: BigDecimal!
  totalVolumeUSD: BigDecimal! # total volume in fiat (usd)
  totalVolumeNotional: BigDecimal!
  totalSwapCount: BigInt!
  latestPrice: LatestPrice # latest price of token, updated when pool liquidity changes
  latestUSDPrice: BigDecimal # latest price of token in USD, updated when pool liquidity changes
  latestUSDPriceTimestamp: BigInt # timestamp at which the latestUSDPrice was updated
  latestFXPrice: BigDecimal # latest "off-chain" price of token in USD, only available if token has an offchain price aggregator
  pool: Pool # pool entity associated with the token, if it is a Balancer pool
  fxOracleDecimals: Int # only available if token has an FX oracle
}

type TokenSnapshot @entity {
  id: ID! # token address + dayId
  token: Token!
  timestamp: Int! # timestamp representing the start of day in UTC
  totalBalanceUSD: BigDecimal! # total balance of tokens across balancer
  totalBalanceNotional: BigDecimal! # underlying asset balance
  totalVolumeUSD: BigDecimal! # amount of volume the token has moved on this day
  totalVolumeNotional: BigDecimal! # underyling asset volume
  totalSwapCount: BigInt!
}

type TradePair @entity {
  "Token Address - Token Address"
  id: ID!
  token0: Token!
  token1: Token!
  totalSwapVolume: BigDecimal!
  totalSwapFee: BigDecimal!
}

type TradePairSnapshot @entity {
  id: ID!
  pair: TradePair!
  timestamp: Int!
  totalSwapVolume: BigDecimal!
  totalSwapFee: BigDecimal!
}

type BalancerSnapshot @entity {
  id: ID!
  vault: Balancer!
  timestamp: Int!
  poolCount: Int!
  totalLiquidity: BigDecimal!
  totalSwapCount: BigInt!
  totalSwapVolume: BigDecimal!
  totalSwapFee: BigDecimal!
  totalProtocolFee: BigDecimal # TODO: make mandatory at next full sync
}

type ProtocolIdData @entity {
  id: ID!
  name: String!
}

type FXOracle @entity {
  id: ID! # FX oracle aggregator address
  tokens: [Bytes!]! # token addresses using this oracle
}
